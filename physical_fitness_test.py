# -*- coding: utf-8 -*-
"""physical_fitness_test.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Emillka/Learn-Python/blob/main/physical_fitness_test.ipynb
"""

import matplotlib.pyplot as plt

class Exam:
    def __init__(self):
        self.pushups = 0
        self.pullups = 0
        self.situps = 0

    def get_data(self):
        while True:
            try:
                self.pushups = int(input("Enter the number of push-ups performed: "))
                if self.pushups < 50:
                    raise ValueError("Too few push-ups. Try again and aim for at least 50 repetitions!")

                self.pullups = int(input("Enter the number of pull-ups performed: "))
                if self.pullups < 10:
                    raise ValueError("Too few pull-ups. Try again and aim for at least 10 repetitions!")

                self.situps = int(input("Enter the number of sit-ups performed: "))
                if self.situps < 90:
                    raise ValueError("Too few sit-ups. Try again and aim for at least 90 repetitions!")

                break
            except ValueError as ve:
                print(ve)

    def calculate_average(self):
        return (self.pushups + self.pullups + self.situps) / 3

    def get_grade(self):
        average = self.calculate_average()
        if average >= 50:
            return "Congratulations! You achieved the maximum possible score on the fitness exam!"
        elif average >= 30:
            return "Congratulations! You passed the fitness exam with a sufficient score!"
        elif average >= 15:
            return "Unfortunately, you did not advance to the next stage, but you can retake the exam."
        else:
            return "Thank you for participating in the exam. Unfortunately, you cannot retake it."

class DataProcessor:
    def __init__(self):
        self.exam = Exam()
        self.exam.get_data()
        self.average = self.exam.calculate_average()
        self.grade = self.exam.get_grade()

    def get_average(self):
        return self.average

    def get_grade(self):
        return self.grade

    def display_data(self):
        print("Push-ups: ", self.exam.pushups)
        print("Pull-ups: ", self.exam.pullups)
        print("Sit-ups: ", self.exam.situps)
        print("Average score: ", self.average)
        print("Grade: ", self.grade)

class DataVisualizer:
    def __init__(self, data_processor):
        self.data_processor = data_processor

    def show_chart(self):
        pushups = self.data_processor.exam.pushups
        pullups = self.data_processor.exam.pullups
        situps = self.data_processor.exam.situps

        labels = ['Push-ups', 'Pull-ups', 'Sit-ups']
        values = [pushups, pullups, situps]
        plt.bar(labels, values)
        plt.title("Fitness Exam Results")
        plt.xlabel("Exercise Type")
        plt.ylabel("Repetitions")
        plt.show()

if __name__ == "__main__":
    data_processor = DataProcessor()
    data_processor.display_data()

    data_visualizer = DataVisualizer(data_processor)
    data_visualizer.show_chart()